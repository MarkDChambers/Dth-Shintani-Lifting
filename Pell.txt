function PellsEquation(D)
	//The idea to solve x^2-Dy^2=4 is to solve x^2-Dy^2=1 with half integral x,y.
	//This is just finding units in some order (extending to include half-integral but nothing more)

	//D := a*b^2
	a,b := SquarefreeFactorization(D);	

	//K = Q(\sqrt(D))
	R<X> := PolynomialRing(Integers());
	f := X^2-D;
	K := NumberField(f);

	//R = Z[\sqrt(D)], O = O_K
	R := EquationOrder(K);
	O := RingOfIntegers(K);

	//Given D is a discriminant, so 0,1 mod 4, we can see that as D=ab^2, a is 1 mod 4
	//So we can include (1+\sqrt(a))/(2), but this is (b+\sqrt(D))/(2b),
	//so should add (b+\sqrt(D))/2 instead. But by adding integers, this is just
	//(1+\sqrt(D))/2 or \sqrt(D)/2 depending on b mod 2

	//Here K.1 = \sqrt(D)
	if (b mod 2) eq 0 then
		Extend := ext<R|1/2*K.1>;
	else
		Extend := ext<R|1/2*(K.1+1)>;
	end if;

	\\Calculate the unit group, where U is the abstract group, and m is the map to the order
	U,m := UnitGroup(Extend);

	\\U.1 = -1, so U.2 is the non-trivial generator
	Elt:= m(U.2);

	\\We want a norm 1 element, so square if needed
	if Norm(m(U.2)) eq -1 then
		Elt:= m(2*U.2);
	end if;

	x := 0/2;
	y := 0/2;

	//Basis for the order will be 1,sqrt(D)/2 or 1,(1+sqrt(D))/2
	//but we want it in the form x+y\sqrt(D), so need to change appropriately
	if (b mod 2) eq 0 then
		x := Elt[1];
		y := Elt[2]/2;
	else
		x := Elt[1]+Elt[2]/2;
		y := Elt[2]/2;
	end if;

	//The generator wanted is the smallest positive one, so this returns that
	if Abs(x+y*Sqrt(D)) le Abs(x-y*Sqrt(D)) then
		if (x+y*Sqrt(D)) ge 0 then
			return [x,y];
		end if;
		return [-x,-y];
	else
		if (x-y*Sqrt(D)) ge 0 then
			return [x,-y];
		end if;
		return [-x,y];
	end if;
	return [];
end function;