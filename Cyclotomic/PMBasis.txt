function PMBasis(X,HQ,e)
	if Dimension(X) eq 2 then
		//get (non-normalised) eigenbasis for star operator
		//i.e. calculate the plus/minus subspaces
		SF := StarInvolution(X);
		FP := Basis(Eigenspace(SF,1))[1];
		FN := Basis(Eigenspace(SF,-1))[1];
		XB := Basis(X);
		XP := FP[1]*XB[1]+FP[2]*XB[2];
		XN := FN[1]*XB[1]+FN[2]*XB[2];

		//normalise this basis (up to sign)
		HXP := HQ(XP);
		HXN := HQ(XN);
		XPN := [Numerator(HXP[i]): i in [1..Degree(HXP)]];
		XNN := [Numerator(HXN[i]): i in [1..Degree(HXN)]];
		XPD := [Denominator(HXP[i]): i in [1..Degree(HXP)]];
		XND := [Denominator(HXN[i]): i in [1..Degree(HXN)]];
		XP := (LCM(XPD)/GCD(XPN))*XP;
		XN := (LCM(XND)/GCD(XNN))*XN;


		//Get correct sign, assuming central L-values (so <{0,\inf} , f^->)
		// and the modular degree (<f^+, f^->) are positive

		IntegralMap := IntegralMapping(X);
		Xe := IntegralMap(e);
		XXP := IntegralMap(XP);
		XXN := IntegralMap(XN);
			
		Coords := Coordinates(VectorSpaceWithBasis([XXP,XXN]),Xe);
		TestX := Coords[1];	
		XX := IntersectionPairing(XP,XN);

		if TestX le 0 then
			XP := (-1)*XP;
			if XX ge 0 then
				XN := (-1)*XN;
			end if;
		elif XX le 0 then
			XN := (-1)*XN;
		end if;

		return XP, XN;	
	end if;
	printf "Dimension not 2";
	return [];
end function;