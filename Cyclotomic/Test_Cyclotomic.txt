import "KojimaTokuno.m": DKohnen, PeriodIntegral;
import "PMBasis.m": PMBasis;

//Work for weight 2, 3/2
k := 1;

//consider up to 20th coefficient and Dth lifts for fundamental discriminants in range -20,..,20
n := 20;

//Calculate the set of fundamental discriminants in this range
FundDiscs := [];
for D in [-n..n] do
	if IsFundamental(D) then
		FundDiscs := Append(FundDiscs,D);
	end if;
end for;

//Calculate the lifts for S_{2k}(N) for N up to 50
for N in [1..50] do
if IsSquarefree(N) and IsOdd(N) then

	//Calculate space of Newforms
	M := ModularSymbols(N,2*k);
	C := CuspidalSubspace(M);
	New := NewSubspace(C);
	NF := NewformDecomposition(New);

	//Only perform calculations if set of newforms isn't empty
	if #NF gt 0 then
		printf "N: %o\n", N;

		//Calculate the mapping from the space of modular symbols, into the cuspidal
		//subspace, such that the integral basis' match up
		HQ := IntegralMapping(C);

		//the cycle {0,\inf}
		e := M ! <1, [Cusps()|0,Infinity()] >;
		//twists of this cycle, as in Birch's lemma
		eTwisted := [TwistedWindingElement(M,1,KroneckerCharacter(D,BaseField(M))) : D in [-n..n]];

		PrimeDivs:= PrimeDivisors(N);
		v := #PrimeDivs;
		AL := [AtkinLehner(M,p): p in PrimeDivs];

		//For every newform f, defining a subspace X
		for X in NF do
			//only consider newforms with rational coefficients (so dimension is 2)
			if Dimension(X) eq 2 then
				//calculate the integral basis elements of the plus and minus components,
				//with respect to the involution [[1,0],[0,-1]]
				XP, XM := PMBasis(X,HQ,e);

				//The map to the subsapce associated with f
				//This is essentially the period mapping
				IntegralMap := IntegralMapping(X);

				//Calculate the plus and minus basis elements in this space
				XXP := IntegralMap(XP);
				XXM := IntegralMap(XM);

				//The intersection pairing is essentially the period mapping
				//and therefore allows us to calculate this map on the entire space
				//in terms of this basis
				ModularDegree := IntersectionPairing(XP,XM);

				//Calculate the twisted L Values
				LTwisted := [&+PeriodIntegral(XXP,XXM,IntegralMap(eT),ModularDegree): eT in eTwisted];

				//print the fourier expansion of f, and the twisted L-values
				printf "\nf: %o\n", qExpansionBasis(X,n);
				printf "L(f,D): %o\n", LTwisted;

				//calculate the Atkin-Lehner eigenvalues
				ALValues := [];
				for W in AL do
					if XP*W eq XP then
						ALValues := Append(ALValues,1);
					else
						ALValues := Append(ALValues,-1);
					end if;
				end for;

				//Calculate the tuples \epsilon_D = (w_p(f) (D/p))_{p|N} for each D 
				//as in the definition of Baruch-Mao
				S := [[0: j in [1..#PrimeDivs] ]: i in [1..#FundDiscs]];
				for i in [1..#FundDiscs] do
					for j in [1..#PrimeDivs] do
						if KroneckerSymbol(FundDiscs[i],PrimeDivs[j])*ALValues[j] eq -1 then
							S[i][j] := -1;
						else
							S[i][j] := 1;
						end if;
					end for;
				end for;

				//Make the set of tuples. This should just be the power set (-1,1)^{v(N)}
				FTypes:= [FType: FType in Set(S)];

				//Here s is the same in Baruch_Mao i.e. the number of "bad primes"
				//and Ms (N' in Baruch-Mao) is the product of these primes
				s := [0: i in [1..#FTypes]];
				Ms := [1: i in [1..#FTypes]];
				for i in [1..#FTypes] do
					for j in [1..#PrimeDivs] do
						if FTypes[i][j] eq -1 then
							s[i] := s[i]+1;
							Ms[i] := Ms[i]*PrimeDivs[j];
						end if;
					end for;
				end for;

				//For each tuple, see which D correspond to this i.e. \epsilon_D=\epsilon
				//Maybe this is called D^\epsilon somewhere
				FClasses := [[]: i in [1..#FTypes]];
				for i in [1..#FTypes] do
					for j in [1..#FundDiscs] do
						D := FundDiscs[j];
						if (S[j] eq FTypes[i]) then
							FClasses[i] := Append(FClasses[i],D);
						end if;
					end for;
				end for;

				//Compute the lifts for each tuple/failure class
				for i in [1..#FTypes] do
					printf "\nS     : %o\n", FTypes[i];
					printf "D     : %o\n", FClasses[i];

					K := CyclotomicField(EulerPhi(Ms[i]));
					DGroup := DirichletGroup(Ms[i],K);

					//Pick the generator in the dirchlet group of conductor Ms characters,
					//which will satisfy the conditions of Baruch-Mao
					Char := &*Append(Generators(DGroup),DGroup ! KroneckerCharacter(1));
					N1 := Conductor(Char);

					//Calculate the level of the twisted form
					NewLevel := LCM(N,N1^2);

					N2 := Numerator(NewLevel/N1);

					//minimise is needed as Char(-1) naturally lives in a field extension
					eps := Numerator(Minimise(Char(-1)));

					Twist := Char;
					Cond := N1;

					printf "\nCond: %o, NewLevel: %o\n", N1, NewLevel;

					//Calculate the coset representatives needed to generate a covering
					// set for the required space of quadratic forms
					//inverses are taken to go between left and right coset representatives
					G := Gamma0(N1*NewLevel);
					Cosets := CosetRepresentatives(G);
					CosetReps := [Matrix(2, 2, Eltseq(c))^(-1): c in Cosets];
					NoOfCosets:= #CosetReps;

					//For each D in the class, calculate the Dth lift of
					//the appropriate twist of f
					for m in [1..#FClasses[i]] do
						D := FClasses[i][m];
						if eps*(-1)^k*D gt 0 then
							Coeffs := DKohnen(M,k,NewLevel,D,n,CosetReps,NoOfCosets,XXP,XXM,IntegralMap,ModularDegree,Char,N1,N2,eps,Twist, Cond);
							printf "S_%o: %o\n",D, Coeffs;
						end if;
					end for;

				end for;
			end if;
		end for;
	end if;
end if;
end for;



